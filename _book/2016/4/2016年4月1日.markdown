[TOC]#2016年4月1日##js ###constructor 属性对象的`constructor`属性用于返回创建该对象的函数，也就是我们常说的**构造函数**。```js// 字符串：String()var str = "张三";document.writeln(str.constructor); // function String() { [native code] }document.writeln(str.constructor === String); // true// 数组：Array()var arr = [1, 2, 3];document.writeln(arr.constructor); // function Array() { [native code] }document.writeln(arr.constructor === Array); // true// 数字：Number()var num = 5;document.writeln(num.constructor); // function Number() { [native code] }document.writeln(num.constructor === Number); // true// 自定义对象：Person()function Person(){    this.name = "CodePlayer";}var p = new Person();document.writeln(p.constructor); // function Person(){ this.name = "CodePlayer"; }document.writeln(p.constructor === Person); // true// JSON对象：Object()var o = { "name" : "张三"};document.writeln(o.constructor); // function Object() { [native code] }document.writeln(o.constructor === Object); // true// 自定义函数：Function()function foo(){    alert("CodePlayer");}document.writeln(foo.constructor); // function Function() { [native code] }document.writeln(foo.constructor === Function); // true// 函数的原型：bar()function bar(){    alert("CodePlayer");}document.writeln(bar.prototype.constructor); // function bar(){ alert("CodePlayer"); }document.writeln(bar.prototype.constructor === bar); // true```>代码中的`[native code]`这是JavaScript的底层内部代码实现，无法显示代码细节。