#2016年3月12日
##CSS3
###flexbox

####Flex容器属性（flex container）


![](img/flex1.png) 

容器默认存在两根轴：水平的主轴**（main axis）**和垂直的交叉轴**（cross axis）**。主轴的开始位置（与边框的交叉点）叫做**main start**，结束位置叫做**main end**；交叉轴的开始位置叫做**cross start**，结束位置叫做**cross end**。
项目默认沿主轴排列。单个项目占据的主轴空间叫做**main size**，占据的交叉轴空间叫做**cross size**。

**flex容器属性**

 - **flex-direction**

**flex-direction**属性决定主轴的方向（即项目的排列方向）。
```css
.box {
    flex-direction: row | row-reverse | column | column-reverse;
}
```


1. row（默认值）：主轴为水平方向，起点在左端。
2. row-reverse：主轴为水平方向，起点在右端。
3. column：主轴为垂直方向，起点在上沿。
4. column-reverse：主轴为垂直方向，起点在下沿。


![](img/flex-direction.png)

 - **flex-wrap**属性

```css
 .box{
  flex-wrap: nowrap | wrap | wrap-reverse;
}
```

1. nowrap（默认）：不换行。
2. wrap：换行，第一行在上方。
3. wrap-reverse：换行，第一行在下方。

![](img/flex-wrap.jpg) 

 - **flex-flow**

```js
.box {
  flex-flow: <flex-direction> || <flex-wrap>;
}
```


flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。

 - **justify-content**

**justify-content**属性定义了项目在主轴上的对齐方式。

```js
.box {
  justify-content: flex-start | flex-end | center | space-between | space-around;
}
```

1. flex-start（默认值）：左对齐
2. flex-end：右对齐
3. center： 居中
4. space-between：两端对齐，项目之间的间隔都相等。
5. space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。

![](img/justify-content.png)

 - **align-items**

**align-items**属性定义项目在交叉轴上如何对齐。

```js
.box {
  align-items: flex-start | flex-end | center | baseline | stretch;
}
```

1. flex-start：交叉轴的起点对齐。
2. flex-end：交叉轴的终点对齐。
3. center：交叉轴的中点对齐。
4. baseline: 项目的第一行文字的基线对齐。
5. stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。

![](img/align-items.png)

 -  **align-content**

**align-content**属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。

```js
.box {
  align-content: flex-start | flex-end | center | space-between | space-around | stretch;
}
```

1. flex-start：与交叉轴的起点对齐。
2. flex-end：与交叉轴的终点对齐。
3. center：与交叉轴的中点对齐。
4. space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
5. space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
6. stretch（默认值）：轴线占满整个交叉轴。


####项目属性

 - order

```js
.item {
  order: <integer>;
}
```

**order**属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。

![](img/order.png)

 - **flex-grow**

**flex-grow**属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。

```js
.item {
  flex-grow: <number>; /* default 0 */
}
```

如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。

![](img/flex-grow.png)

 -  **flex-shrink**

**flex-shrink**属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 

```js
.item {
  flex-shrink: <number>; /* default 1 */
}
```

如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。
负值对该属性无效。

![](img/flex-shrink.jpg)

